Program :- Write a C program to represent a Graph using adjacency matrix and implement Breadth 		   First Search (BFS) algorithm.


Name :- Jyothish Mohan A
Roll No :- 25


Code :- 

#include <stdio.h>

int Adjmatrix[4][4]={
	
	{0, 0, 1, 0}, 
	{1, 0, 0, 0}, 
	{0, 0, 0, 1}, 
	{0, 1, 0, 0}   
};
int visit[4]={0,0,0,0}; 
int queue[4];
int front=-1;
int rear=-1;

int isEmpty()
{
	return front==-1;
}

int isFull()
{
	return rear==4-1;
}

void enqueue(int element)
{
	if (isFull())
	{
        	printf("Queue is full\n");
        	return;
	}
	if (isEmpty())
	{
        	front = rear = 0;
    	}
	else
	{
		rear++;
	}
	queue[rear] = element;
	}

int dequeue()
{
	if (isEmpty())
	{
        	printf("Queue is empty\n");
        	return -1;
	}
	int element = queue[front];
	if (front == rear)
	{
        	front = rear = -1;
	}
	else
	{
        	front++;
	}
    	return element;
	}

void bfs(int startNode)
{
	enqueue(startNode);
	visit[startNode] = 1;
	printf("BFS Traversal: ");

	while (!isEmpty())
	{
        	int currentNode = dequeue();
        	printf("%d ", currentNode + 1);
        	for (int i = 0; i < 4; i++)
		{
			if (Adjmatrix[currentNode][i] == 1 && visit[i] == 0)
			{
                		enqueue(i);
                		visit[i] = 1;
            		}
		}
        }

   	 printf("\n");
}

int main()
{
	bfs(0); 
	return 0;
}

-------------------------------------------------------------------------------------------------

Program :-Write a C program to represent a Graph using adjacency matrix and implement Depth 		  First Search (DFS) algorithm.


Code :-

#include <stdio.h>
#include <stdlib.h>

int Adjmatrix[4][4] = {
    {0, 0, 1, 0}, 
    {1, 0, 0, 0}, 
    {0, 0, 0, 1},  
    {0, 1, 0, 0}   
};
int visit[4] = {0, 0, 0, 0}; 
int stack[4];
int top = -1;

int isEmpty()
{
	return top == -1;
}

int isFull()
{
	return top == 4-1;
}

void push(int element)
{
	if (isFull())
	{
        	printf("Stack is full\n");
        	return;
	}
	stack[++top] = element;
}

int pop()
{
	if (isEmpty())
	{
        	printf("Stack is empty\n");
        	return -1;
	}
	return stack[top--];
}

void dfs(int startNode)
{
	push(startNode);
	printf("DFS Traversal: ");

	while (!isEmpty())
	{
        	int currentNode = pop();
        	if (!visit[currentNode])
		{
			printf("%d ", currentNode + 1); 
			visit[currentNode] = 1;

			for (int i = 0; i < 4; i++)
			{
                		if (Adjmatrix[currentNode][i] == 1 && !visit[i])
				{
                    		push(i);
				}
                	}
		}
        }

	printf("\n");
}

int main()
{
	dfs(0); 
	return 0;
}
